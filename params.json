{
  "name": "Exkorpion",
  "tagline": "A BDD library  for Elixir developers",
  "body": "[![Build Status](https://travis-ci.org/wesovilabs/exkorpion.png)](https://travis-ci.org/wesovilabs/exkorpion)\r\n[![Hex version](https://img.shields.io/hexpm/v/exkorpion.svg \"Hex version\")](https://hex.pm/packages/exkorpion)\r\n![Hex downloads](https://img.shields.io/hexpm/dt/exkorpion.svg \"Hex downloads\")\r\n\r\n# Exkorpion\r\n\r\n**Exkorpion is a framework that will help developers to write tests in a BDD form.**\r\n\r\n## Installation\r\n\r\nLibrary is [available in Hex](http://hexdocs.pm/exkorpion), the package can be installed as:\r\n\r\n  1. Add `exkorpion` to your list of dependencies in `mix.exs`:\r\n\r\n    ```elixir\r\n    def deps do\r\n      [{:exkorpion, \"~> 0.0.2-rc.1\"}]\r\n    end\r\n    ```\r\n\r\n  2. Ensure `exkorpion` is started before your application:\r\n\r\n    ```elixir\r\n    def application do\r\n      [applications: [:exkorpion]]\r\n    end\r\n    ```\r\n\r\n## Getting started with Exkorpion\r\n\r\nWrapping ExUnit to achieve a BDD syntax for our tests.\r\n\r\nBelow you can find some very basic examples of how to use  **Exkorpion**\r\n\r\n\r\n```elixir\r\n\r\n  defmodule Exkorpion.MathExamplesTest do\r\n  use Exkorpion\r\n\r\n  def sum a, b do\r\n    a + b\r\n  end\r\n\r\n  def subs a, b do\r\n    a - b\r\n  end\r\n\r\n\r\n  \r\n  scenario \"testing sum operation works as expected\" do\r\n \r\n    beforeEach do\r\n      %{a: 12}\r\n    end\r\n\r\n\r\n    it \"does multiple operations depending on vairable input\" do\r\n\r\n      %{\r\n        with: fn ctx ->\r\n        [\r\n          %{param1: ctx.a, param2: 3, result: 15, op: fn a,b -> sum(a,b) end},\r\n          %{param1: 3, param2: -2, result: 5, op: fn a,b -> subs(a,b) end}\r\n        ]\r\n        end,\r\n        given: fn ctx ->\r\n          %{a: ctx.param1, b: ctx.param2}\r\n        end,\r\n        when: &(%{c: &1.op.(&1.a ,&1.b)}),\r\n        then: fn ctx ->\r\n          assert ctx.c === ctx.result\r\n        end\r\n      }\r\n    end\r\n  end  \r\n  \r\n  scenario \"testing sum operation works as expected 2\" do\r\n    \r\n    beforeEach do\r\n      %{a: 10}\r\n    end\r\n\r\n    it \"sum positive numbers works as expected\" do\r\n      %{\r\n        given: &(%{a: &1.a, b: 3}),\r\n        when: &(%{c: &1.a + &1.b}),\r\n        then: fn ctx ->\r\n          assert ctx.c === 13\r\n        end\r\n      }\r\n    end\r\n\r\n    it \"sum negative numbers and it should work as expected\" do\r\n      %{\r\n        given: &(%{a: &1.a, b: -2}),\r\n        when: &(%{c: sum(&1.a ,&1.b)}),\r\n        then: fn ctx ->\r\n          assert ctx.c === 8\r\n        end\r\n      }\r\n    end\r\n\r\n  end\r\n\r\nend\r\n\r\n```\r\n   \r\n    \r\n## How to run\r\n\r\n- Make a **scenarios** directory in your project\r\n- Add files with sufix **_scenario.ex** or **_scenario.exs**\r\n- Implementing some test as example above.\r\n- Run  command **MIX_ENV=test mix exkorpion**\r\n    \r\n    \r\n## Project status\r\n\r\n- Improving coding style \r\n- Implementing new functionalities.\r\n- Detecting bugs and fixing them.\r\n- Waiting for feddback.\r\n    \r\n\r\n## Contributors\r\n\r\n- **Iv√°n Corrales Solera** , <developer@wesovi.com>, [@wesovilabs](https://www.twitter.com/wesovilabs)\r\n\r\n## Stable version\r\n\r\n**0.0.1** is the stable version",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}